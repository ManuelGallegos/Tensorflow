import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt

from tensorflow.keras.layers import Input,Conv2D,Dense,Flatten,Dropout,MaxPool2D

from tensorflow.keras.models import Model

#import mnist database
mnist_data = tf.keras.datasets.fashion_mnist

#dividing data into training and test sets

(training_images, training_labels),(test_images,test_labels)=mnist_data.load_data()

#scaling images

training_images,test_images = training_images/255.0,test_images/255.0

#print shape of our training data
print(training_images.shape)

#plotting image number 9

#plt.figure()
#plt.imshow(test_images[9])
#plt.colorbar()
#plt.grid(false)
#plt.show()

# convert data into the right shape

training_images = np.expand_dims(training_images,-1)
test_images=np.expand_dims(test_images,-1)
print(training_images.shape)

#print the number of output classes

output_classes = len(set(training_labels))
print("Number of output classes is:",output_classes)

print(training_images[0].shape)

#Developing CNN model


input_layer = Input(shape=training_images[0].shape)
conv1=Conv2D(32, (3,3), strides=2,activation='relu')(input_layer)

maxpool1=MaxPool2D(2,2)(conv1)

conv2=Conv2D(64,(3,3),strides=2,activation='relu')(maxpool1)

#conv3=Conv2D(128, (3,3), strides=2,activation='relu')(conv2)


flat1= Flatten()(conv2)

drop1 = Dropout(0.2)(flat1)

dense1=Dense(512,activation='relu')(drop1)
drop2=Dropout(0.2)(dense1)
output_layer=Dense(output_classes,activation='softmax')(drop2)

model = Model(input_layer, output_layer)

#compilling the CNN model

model.compile(optimizer='adam', loss='sparce_categorical_crossentropy',metrics=['accuracy'])


#print model architecture

from tensorflow.keras.utils import plot_model
plot_model(model,to_file='model_plot1.png',show_shapes=True,show_layer_names=True)

#training CNN model

model_history = model.fit(training_images,training_labels,epochs=20,validation_data=(test_images,test_labels),verbose=1)

#plotting accuracy

#import matplotlib.pyplot as plt
plt.plot(model_history.history['accuracy'],label='accuracy')

plt.plot(model_history.history['val_accuracy'],label='val_accuracy')

plt.legend(['train','test'],loc='lower left')


#making predictions on a single image

output=model.predict(test_images)
prediction=np.argmax(output[9])
print(prediction)
